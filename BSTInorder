#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
};

// new node 
struct node* New_node(int data){
    node* newNode = new node();
    newNode -> key = data;
    newNode -> left = NULL;
    newNode -> right = NULL;
    return newNode;
}

//minimum key value node return
struct node* minimum(struct node* node){
    struct node* MinNode = node;
    while (MinNode->left != NULL){
        MinNode = MinNode -> left;
    }
    return MinNode;
}    
    
// Inorder traversal
void traverseInOrder(struct node *root) {
   if(root == NULL){
       return;
   }
    else {
        traverseInOrder(root -> left);
        cout << root -> key << " ";
        traverseInOrder(root -> right);
    }
}


// Insert a node
struct node *insertNode(struct node *node, int key) {
    
    if (node == NULL)
    {
        return New_node(key);
    }
    else if (key < node -> key)
    {
        node -> left = insertNode(node -> left, key);
    }
    else 
    {
        node -> right = insertNode(node->right,key);
    }
    return node;
}


// Deleting a node
struct node *deleteNode(struct node *root, int data) 
{
    if (root ==NULL)
    {
        return root;
    }
    if (data < root -> key)
    {
        root -> left = deleteNode(root->left,data);
    }
    else if (data > root -> key)
    {
        root -> right = deleteNode(root->right,data);
    }
    else
    {
        //when there is no child 
        if (root -> left == NULL and root -> right == NULL)
        {
            return NULL;
        }
        
        //when there is only right Child
        else if (root -> left == NULL)
        {
            struct node* newNode = root -> right;
            free(root);
            return newNode;
        }
        
        //when there is only left child
        else if (root -> right == NULL)
        {
            struct node* newNode = root -> left;
            free(root);
            return newNode;
        }
        
        //when there is two children
        else{
            struct node* newNode = minimum(root->right);
            root -> key = newNode -> key;
            root -> right = deleteNode(root->right, newNode -> key);
        }
 
    }
    return root;
}

// Driver code
int main() 
{
  struct node *root = NULL;

  int operators;
  int operand;
  cin >> operators;

  while (operators != -1) {
    switch(operators) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operators;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operators;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseInOrder(root);
}
